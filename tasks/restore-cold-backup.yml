---

- name: (main/restore-cold-backup) Create dir for backup files
  file:
    path: "{{ database_backup_location }}/{{ database_backup }}"
    mode: 0775
    state: directory
  become: yes
  become_user: oracle

- name: (main/restore-cold-backup) Copy restore script.
  copy:
    src: "{{ role_path }}/files/restoredb.sh"
    dest: "{{ database_backup_location }}/restoredb.sh"
    mode: 0744
  become: yes
  become_user: oracle

- name: (main/restore-cold-backup) lookup ssm parameter store in nominated region
  debug:
    msg: "{{ lookup('aws_ssm', '{{ database_backup_sys_passwd }}', region=''~ region ~'' ) }}"
    verbosity: 4

- name: (main/restore-cold-backup) Set source ora db sys password
  set_fact:
    sys_passwd: "{{ lookup('aws_ssm', '{{ database_backup_sys_passwd }}', region=''~ region ~'' ) }}"
  no_log: true

- name: (main/restore-cold-backup) Extract S3 bucket name from arn
  set_fact:
    src_s3_bucket_name: "{{ dependencies_bucket_arn | regex_replace('^arn:aws:s3:::','') }}"

- name: (main/restore-cold-backup) XXX
  debug:
    var: src_s3_bucket_name
    verbosity: 1

- name: (main/restore-cold-backup) Set source S3 backup path
  set_fact:
    src_s3_backup_path: "s3://{{ src_s3_bucket_name }}/{{ database_backup }}/"

- name: (main/restore-cold-backup) List backups
  aws_s3:
    bucket: "{{ src_s3_bucket_name }}"
    mode: list
    prefix: "{{ database_backup }}/"
  register: s3_contents
  failed_when: s3_contents.s3_keys|length|int < 1

# - name: (main/restore-cold-backup) s3_contents
#   debug:
#     var: s3_contents
#     verbosity: 1
#
# - name: (main/restore-cold-backup) Get backups
#   aws_s3:
#     bucket: "{{ src_s3_bucket_name }}"
#     object: "{{ item }}"
#     dest: "{{ database_backup_location }}/{{ item }}"
#     mode: get
#     overwrite: different
#   with_items: "{{ s3_contents.s3_keys }}"

- name: (main/restore-cold-backup) Run script
  shell: "{{ database_backup_location }}/restoredb.sh -d {{ database_sid }} -l {{ database_backup_location }}/{{ database_backup }} -p {{ sys_passwd }} -s {{ src_s3_backup_path }}"
  register: restoredb_result
  failed_when: restoredb_result.stdout != "0"
  become: yes
  become_user: oracle
