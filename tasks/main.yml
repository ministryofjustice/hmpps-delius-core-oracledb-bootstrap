---

- name: (main) Load in our vars
  include_vars:
    file: main.yml
  tags: always

- block:
    - name: (main) Define our service user
      set_fact:
        service_user_name: "oracle"
  when: not service_user_name|default(false)
  tags: always

- block:
    - name: (main) Define our service user's group
      set_fact:
        service_user_group: "oinstall"
  when: not service_user_group|default(false)
  tags: always

# Not On Localhost
# - name: (main) Get our instance facts
#   ec2_metadata_facts:
#   tags: always
- name: Only for local running
  set_fact:
    ansible_ec2_instance_identity_document_region: DONOTUSE

- name: (main) Display database type
  debug:
    var: database_type
    verbosity: 1
  tags: always

- name: (main) Gather installation facts
  include: check-installation.yml
  tags: always

- name: (main) Reconfigure our config that was set during ami build
  include: reconfigure-instance.yml
  tags: always

- block:
    - name: (main) Configure and startup asm
      include: configure-asm.yml

    - name: (main) Create our check file so we don't run this again
      file:
        path: "/home/{{ service_user_name }}/.grid_installed"
        state: touch

    - name: (main) grid installed
      set_fact:
        grid_installed: true

  when: not grid_installed|default(false)
  tags: asm

- block:
    - name: (main) Configure out database
      include: create-database.yml

    - name: (main) Create our check file so we don't run this again
      file:
        path: "/home/{{ service_user_name }}/.oradb_installed"
        state: touch

    - name: (main) oradb installed
      set_fact:
        oradb_installed: true

  when:
    - not oradb_installed|default(false)
    - grid_installed|default(false)
    - database_type != "standby"
  tags: create_db

- block:
    - name: (main) Install OPatch utility
      include: patch-oracle.yml

    - name: (main) Install PSU patch
      include: patch-psu.yml

    - name: (main) Remove our patch source archive now we have patched
      file:
        path: "{{ item }}"
        state: absent
      with_items:
        - "{{ oracle_patch_installer_directory }}/p6880880_112000_Linux-x86-64.zip"

    - name: (main) Create our check file so we don't run this again
      file:
        path: "/home/{{ service_user_name }}/.patches_applied"
        state: touch

    - name: (main) patches applied
      set_fact:
        patches_applied: true

  when:
    - grid_installed|default(false)
    - not patches_applied|default(false)
  tags: patch


- name: (main) Setup TAF Service Name
  include: set-taf-service.yml
  when:
    - grid_installed|default(false)
    - database_type != "standby"
  tags: service

- block:
    - name: (main) Install Oracle Secure Web Backup Service (oswbs)
      include: install-oswbs.yml
  when:
    - grid_installed|bool
    - patches_applied|bool
  tags: oswbs

- name: (main) Display database_bootstrap_restore var
  debug:
    msg:
      - "database_type - {{database_type}}"
      - "database_bootstrap_restore - {{database_bootstrap_restore}}"
      - "backup_restored - {{backup_restored}}"
      - "grid_installed - {{grid_installed}}"
      - "oradb_installed - {{oradb_installed}}"
      - "patches_applied - {{patches_applied}}"
    verbosity: 2
  tags: always

- block:
    - name: (main) Restore Cold Backup
      include: restore-cold-backup.yml

    - name: (main) Create our check file so we don't run this again
      file:
        path: "/home/{{ service_user_name }}/.backup_restored"
        state: touch

    - name: (main) backup restored
      set_fact:
        backup_restored: true
  when:
    - database_type != "standby"
    - database_bootstrap_restore|bool
    - not backup_restored|bool
    - grid_installed|bool
    - oradb_installed|bool
    - patches_applied|bool
  tags: restore

- block:
    - name: (main) Copy huge page script
      copy:
        src: "{{ role_path }}/files/hugepages.sh"
        dest: /tmp/hugepages.sh
        mode: u+x

    - name: (main) Execute huge page script
      shell: "/tmp/hugepages.sh"
      register: hugepage_value
      failed_when: hugepage_value.rc != 0

    - name: (main) Find the value of hugepages already set
      command: /usr/bin/cat /proc/sys/vm/nr_hugepages
      register: hugepage_result
      failed_when: hugepage_result.rc != 0

    - name: (main) Configure kernel for hugepages if required
      sysctl:
        name: "vm.nr_hugepages"
        value: "{{ hugepage_value.stdout }}"
        state: present
      when: hugepage_result.stdout != hugepage_value.stdout

    - name: (main) Create our check file so we don't run this again
      file:
        path: "/home/{{ service_user_name }}/.hugepages_set"
        state: touch

    - name: (main) hugepages set
      set_fact:
        hugepages_set: true

  when:
    - database_type != "standby"
    - backup_restored|bool
    - not hugepages_set|bool
  tags: hugepages

- block:
    - name: (main) Create DB ready for HA check file standby
      file:
        path: "/home/{{ service_user_name }}/.ready_for_ha"
        state: touch
  when:
    - database_type != "primary"
    - grid_installed|bool
    - patches_applied|bool
    - not ready_for_ha|bool

- block:
    - name: (main) Create DB ready for HA check file primary
      file:
        path: "/home/{{ service_user_name }}/.ready_for_ha"
        state: touch
  when:
    - database_type != "standby"
    - grid_installed|bool
    - oradb_installed|bool
    - patches_applied|bool
    - backup_restored|bool
    - hugepages_set|bool
    - not ready_for_ha|bool

- name: (main) Get environment-specific configuration variables
  include: get-env-config.yml
  tags: always

# Install all one-off patches specified for this environment
- block:
    - name: Install Patches
      include_role:
        name: oracle-db-patches
      vars:
          install_absent_patches: true
          target_host: localhost
          environment_name: "{{ hmpps_environment }}"
          config_vars: "~/.hmpps-env-configs/ansible/group_vars/all.yml"
      become: true
      become_user: oracle
  when:
    - grid_installed|bool
    - oradb_installed|bool or database_type == "standby"
    - patches_applied|bool
    - backup_restored|bool or not (database_bootstrap_restore|bool)

- name: Remove Environment Configuration Files (now finished with them)
  file:
      path: ~/.hmpps-env-configs
      state: absent
